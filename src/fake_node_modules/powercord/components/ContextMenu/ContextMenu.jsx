const { React, getModule } = require('powercord/webpack');

const ButtonItem = require('./Button');
const CheckboxItem = require('./Checkbox');
const SliderItem = require('./Slider');
const SubmenuItem = require('./Submenu');
const ItemGroup = require('./ItemGroup');

let classes = null;
setImmediate(async () => {
  classes = {
    itemScroller: (await getModule([ 'itemToggle', 'checkbox' ])).scroller,
    ...await getModule([ 'itemToggle', 'checkbox' ]),
    ...await getModule([ 'scrollbar', 'scrollerWrap' ])
  };
});

// @todo: rewrite and extend from base component
module.exports = class ContextMenu extends React.Component {
  render () {
    const children = this.props.itemGroups.map(items => (
      React.createElement(ItemGroup, {
        children: items.map(item => {
          switch (item.type) {
            case 'slider':
              return <SliderItem {...item} />;

            case 'button':
              return <ButtonItem {...item} />;

            case 'submenu':
              return <SubmenuItem {...item} />;

            case 'checkbox':
              return <CheckboxItem {...item} />;

            default:
              return null;
          }
        })
      })
    ));

    return this.renderContextMenu(children);
  }

  renderContextMenu (children) {
    const styles = {
      bottom: `${(window.innerHeight + 24) - this.props.pageY}px`,
      minWidth: this.props.width
    };

    const contextMenuWithScroller = (
      <div className={[ classes.scrollerWrap, classes.scrollerThemed, classes.themeGhostHairline ].filter(Boolean).join(' ')}>
        <div className={[ classes.scroller, classes.systemPad, classes.contextMenu, classes.itemScroller ].filter(Boolean).join(' ')} style={styles}>
          {children}
        </div>
      </div>
    );

    if (this.props.scroller === false) {
      return (
        <div className={classes.contextMenu} style={styles}>
          {children}
        </div>
      );
    }

    return contextMenuWithScroller;
  }
};
