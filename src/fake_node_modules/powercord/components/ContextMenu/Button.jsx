/**
 * Powercord, a lightweight @discordapp client mod focused on simplicity and performance
 * Copyright (C) 2018-2020  aetheryx & Bowser65
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

const { React, getModule, contextMenu } = require('powercord/webpack');
const { getOwnerInstance, waitFor } = require('powercord/util');
const { FontAwesome } = require('../Icons');

const ItemGroup = require('./ItemGroup.jsx');

let classes = null;
let appOwnerInstance = null;
setImmediate(async () => {
  classes = {
    ...await getModule([ 'scrollbar', 'scrollerWrap' ]),
    ...await getModule([ 'itemToggle', 'checkbox' ])
  };

  waitFor(`.${(await getModule([ 'app' ])).app.split(' ')[0]}`)
    .then(app => appOwnerInstance = getOwnerInstance(app));
});

module.exports = class ButtonItem extends React.PureComponent {
  onClick () {
    if (this.props.disabled) {
      appOwnerInstance.shake(600, 5);
    } else if (this.props.onClick) {
      this.props.onClick();

      contextMenu.closeContextMenu();
    }
  }

  render () {
    const button = (
      <div
        className={[
          classes.item,
          this.props.image && classes.itemImage,
          classes.clickable,
          this.props.disabled && classes.disabled
        ].filter(Boolean).join(' ')}
        onClick={this.onClick.bind(this)}
        role='button'
      >
        <span className={classes.label} style={{ color: this.props.highlight }}>
          {this.props.name}
        </span>

        {this.props.image
          ? this.getButtonImage()
          : this.props.icon
            ? <FontAwesome icon={this.props.icon}/>
            : <div className={classes.hint}>
              {this.props.hint}
            </div>}
      </div>
    );

    if (this.props.seperate) {
      return React.createElement(ItemGroup, {
        children: [ button ]
      });
    }

    return button;
  }

  getButtonImage () {
    return <img
      src={this.props.image}
      className={[ this.props.className, classes.image ].filter(Boolean).join(' ')}
      alt=''
    />;
  }
};
