const { getModule, getModuleByDisplayName } = require('powercord/webpack');
const AsyncComponent = require('./AsyncComponent');

require('fs')
  .readdirSync(__dirname)
  .filter(file => file !== 'index.js')
  .forEach(filename => {
    const moduleName = filename.split('.')[0];
    exports[moduleName] = require(`${__dirname}/${filename}`);
  });

// Add some util components
Object.assign(exports, {
  KeyboardShortcut: AsyncComponent.from(getModuleByDisplayName('KeyboardShortcut')),
  Button: AsyncComponent.from(getModule(m => m.DropdownSizes)),
  FormNotice: AsyncComponent.from(getModuleByDisplayName('FormNotice')),
  Card: AsyncComponent.from(getModuleByDisplayName('Card')),
  Clickable: AsyncComponent.from(getModuleByDisplayName('Clickable')),
  Switch: AsyncComponent.from(getModuleByDisplayName('Switch')),
  // SearchBar: AsyncComponent.from(getModuleByDisplayName('SearchBar')),
  Spinner: AsyncComponent.from(getModuleByDisplayName('Spinner')),
  FormTitle: AsyncComponent.from(getModuleByDisplayName('FormTitle')),
  HeaderBar: AsyncComponent.from(getModuleByDisplayName('HeaderBar')),
  TabBar: AsyncComponent.from(getModuleByDisplayName('TabBar')),
  Caret: AsyncComponent.from(getModuleByDisplayName('Caret')),
  Text: AsyncComponent.from(getModuleByDisplayName('Text')),
  Tooltip: AsyncComponent.from((async () => (await getModule([ 'TooltipContainer' ])).TooltipContainer)()),
  Icon: () => null // To prevent older plugins from crashing
});

// Re-export module properties
(async () => {
  const FormNotice = await getModuleByDisplayName('FormNotice', true, true);
  const Button = await getModule(m => m.DropdownSizes, true, true);
  const HeaderBar = await getModuleByDisplayName('HeaderBar', true, true);
  const Card = await getModuleByDisplayName('Card', true, true);
  const TabBar = await getModuleByDisplayName('TabBar', true, true);
  const Text = await getModuleByDisplayName('Text', true, true);
  [ 'Colors', 'Family', 'Sizes', 'Weights' ].forEach(prop => exports.Text[prop] = Text[prop]);
  [ 'Types', 'Header', 'Item', 'Separator' ].forEach(prop => exports.TabBar[prop] = TabBar[prop]);
  [ 'DropdownSizes', 'Sizes', 'Colors', 'Looks' ].forEach(prop => exports.Button[prop] = Button[prop]);
  [ 'Icon', 'Title', 'Divider' ].forEach(prop => exports.HeaderBar[prop] = HeaderBar[prop]);
  [ 'Types' ].forEach(prop => exports.FormNotice[prop] = FormNotice[prop]);
  [ 'Types' ].forEach(prop => exports.Card[prop] = Card[prop]);
})();
