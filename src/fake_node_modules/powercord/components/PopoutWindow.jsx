const { React, Flux, getModule, getModuleByDisplayName } = require('powercord/webpack');
const AsyncComponent = require('./AsyncComponent');

const ErrorBoundary = AsyncComponent.from(getModuleByDisplayName('ErrorBoundary'));

class PopoutWindow extends React.PureComponent {
  componentDidMount () {
    // noinspection JSIgnoredPromiseFromCall
    this.htmlProps();
  }

  componentDidUpdate () {
    // noinspection JSIgnoredPromiseFromCall
    this.htmlProps();
  }

  async htmlProps () {
    /*
     * WhY nOt UsE rEaCt hElmEt??
     * Discord's impl for popout windows is a bit weird (kinda smart tho):
     * They basically render the component inside the **parent** window and then pass it to the child window.
     *
     * It means no need for the child window to populate its cache or anything, but that means global objects like
     * `document` refers to the **parent** window and not the child window. Which means ReactHelmet cannot work.
     */
    const guestWindow = this.props.windowManager.getWindow(this.props.windowId);
    guestWindow.document.head.parentElement.className = [ `theme-${this.props.theme}`, this.props.fontScaleClass, 'mouse-mode full-motion' ].filter(Boolean).join(' ');
    guestWindow.document.head.parentElement.style = `font-size: ${this.props.fontScale}%`;
    guestWindow.document.head.parentElement.lang = this.props.locale;
    guestWindow.document.querySelector('#app-mount').style.height = '100%';
  }

  render () {
    const { AppLayerProvider, AppLayerContainer } = this.props.layerModule;
    return (
      <ErrorBoundary>
        <AppLayerProvider>
          {this.props.children}
          <AppLayerContainer/>
        </AppLayerProvider>
      </ErrorBoundary>
    );
  }
}

module.exports = AsyncComponent.from((async () => {
  const windowManager = await getModule([ 'getWindow' ]);
  const layerModule = await getModule([ 'AppLayerProvider' ]);
  const settings1Store = await getModule([ 'theme', 'locale' ]);
  const settings2Store = await getModule([ 'fontScale', 'darkSidebar' ]);
  const Component = props => (
    <PopoutWindow
      {...props}
      windowManager={windowManager}
      layerModule={layerModule}
    />
  );

  return Flux.connectStores(
    [ settings1Store, settings2Store ],
    () => ({
      locale: settings1Store.locale,
      theme: settings1Store.theme,
      fontScale: settings2Store.fontScale,
      fontScaleClass: settings2Store.fontScaleClass
    })
  )(Component);
})());
