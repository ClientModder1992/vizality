const { existsSync } = require('fs');
const { join } = require('path');
const { sleep, createElement } = require('vizality/util');
const { resolveCompiler } = require('vizality/compilers');
const Updatable = require('./Updatable');

/**
 * Main class for Vizality plugins
 * @property {Boolean} ready Whether the plugin is ready or not
 * @property {SettingsCategory} settings Plugin settings
 * @property {Object.<String, Compiler>} styles Styles the plugin loaded
 * @abstract
 */
class Plugin extends Updatable {
  constructor () {
    super(vizality.pluginManager.pluginDir);
    this.settings = vizality.api.settings.buildCategoryObject(this.entityID);
    this.ready = false;
    this.styles = {};

    /** @deprecated */
    this.registered = {
      styles: [],
      settings: [],
      commands: [],
      keybinds: [],
      routes: [],
      toasts: [],
      announcements: [],
      rpcScopes: [],
      rpcEvents: []
    };

    this.baseBadgeStyle =
      `color: #fff;
      border-radius: 3px;
      text-align: center;
      display: inline-block;
      font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
      text-transform: uppercase;
      font-size: 10px;
      font-weight: 700;
      line-height: 14px;
      margin-right: 3px;
      padding: 1px 4px;
      `;

    this.mainBadgeStyle =
      `background-repeat: no-repeat;
      background-position: center;
      background-size: contain;
      padding: 2px 14px 5px 0;
      border-radius: 5px;
      text-align: center;
      margin: 0 4px 1px 0;
      display: inline-block;
      `;

    this.descriptorBadgeStyle =
      `background: #d021a1;
      ${this.baseBadgeStyle}
      `;

    this.moduleBadgeStyle = this.baseBadgeStyle;

    this.warnBadgeStyle =
      `color: #000;
       background: #fffc00;
       ${this.baseBadgeStyle}
      `;

    this.errorBadgeStyle =
      `background: #ff0000;
       ${this.baseBadgeStyle}
      `;
  }

  // Getters
  get isInternal () {
    return this.entityID.startsWith('vz-');
  }

  get iconColor () {
    if (this.manifest.color) {
      const r = `0x${this.manifest.color[1]}${this.manifest.color[2]}`;
      const g = `0x${this.manifest.color[3]}${this.manifest.color[4]}`;
      const b = `0x${this.manifest.color[5]}${this.manifest.color[6]}`;

      if ((r * 0.299) + (g * 0.587) + (b * 0.114) > 186) {
        return '#000';
      }

      return '#fff';
    }

    return '#fff';
  }

  get dependencies () {
    return this.manifest.dependencies;
  }

  get optionalDependencies () {
    return this.manifest.optionalDependencies;
  }

  get effectiveOptionalDependencies () {
    const deps = this.manifest.optionalDependencies;
    const disabled = vizality.settings.get('disabledPlugins', []);
    return deps.filter(d => vizality.pluginManager.get(d) !== void 0 && !disabled.includes(d));
  }

  get allDependencies () {
    return this.dependencies.concat(this.optionalDependencies);
  }

  get allEffectiveDependencies () {
    return this.dependencies.concat(this.effectiveOptionalDependencies);
  }

  get dependents () {
    const dependents = [ ...vizality.pluginManager.plugins.values() ].filter(p => p.manifest.dependencies.includes(this.entityID));
    return [ ...new Set(dependents.map(d => d.entityID).concat(...dependents.map(d => d.dependents))) ];
  }

  get color () {
    return '#7289da';
  }

  /**
   * Loads a plugin stylesheet. Will automatically get removed at plugin unload.
   * @param {String} path Stylesheet path. Either absolute or relative to the plugin root
   */
  loadStylesheet (path) {
    let resolvedPath = path;
    if (!existsSync(resolvedPath)) {
      // Assume it's a relative path and try resolving it
      resolvedPath = join(vizality.pluginManager.pluginDir, this.entityID, path);

      if (!existsSync(resolvedPath)) {
        throw new Error(`Cannot find "${path}"! Make sure the file exists and try again.`);
      }
    }

    const id = Math.random().toString(36).slice(2);
    const compiler = resolveCompiler(resolvedPath);
    const style = createElement('style', {
      id: `style-${this.entityID}-${id}`,
      'vz-style': true,
      'vz-plugin': true
    });

    document.head.appendChild(style);
    this.styles[id] = compiler;
    const compile = async () => {
      style.innerHTML = await compiler.compile();
    };

    compiler.enableWatcher();
    compiler.on('src-update', compile);
    this[`__compileStylesheet_${id}`] = compile;
    this[`__compiler_${id}`] = compiler;
    return compile();
  }

  // Update
  async _update (force = false) {
    const success = await super._update(force);
    if (success && this.ready) {
      await vizality.pluginManager.remount(this.entityID);
    }
    return success;
  }

  // Internals
  async _load () {
    try {
      while (!this.allEffectiveDependencies.every(pluginName => vizality.pluginManager.get(pluginName).ready)) {
        await sleep(1);
      }

      if (typeof this.startPlugin === 'function') {
        await this.startPlugin();
      }

      this.log('Plugin loaded');
    } catch (e) {
      this.error('An error occurred during initialization!', e);
    } finally {
      this.ready = true;
    }
  }

  async _unload () {
    try {
      this.unloadDeprecated();

      for (const id in this.styles) {
        this[`__compiler_${id}`].on('src-update', this[`__compileStylesheet_${id}`]);
        document.getElementById(`style-${this.entityID}-${id}`).remove();
        this.styles[id].disableWatcher();
      }

      if (typeof this.pluginWillUnload === 'function') {
        await this.pluginWillUnload();
      }

      this.log('Plugin unloaded');
    } catch (e) {
      this.error('An error occurred during shutting down! It\'s heavily recommended reloading Discord to ensure there are no conflicts.', e);
    } finally {
      this.ready = false;
    }
  }

  /** @deprecated */
  unloadDeprecated () {
    this.registered.styles.forEach(style => vizality.styleManager.unmount(style));
    this.registered.settings.forEach(tab => vizality.api.settings.unregisterSettings(tab));
    this.registered.commands.forEach(command => vizality.api.commands.unregisterCommand(command));
    this.registered.keybinds.forEach(keybind => vizality.api.keybinds.unregisterKeybind(keybind));
    this.registered.routes.forEach(path => vizality.api.router.unregisterRoute(path));
    this.registered.toasts.forEach(toast => vizality.api.notices.closeToast(toast));
    this.registered.announcements.forEach(announcement => vizality.api.notices.closeAnnouncement(announcement));
    this.registered.rpcScopes.forEach(scope => vizality.api.rpc.unregisterScope(scope));
    this.registered.rpcEvents.forEach(evt => vizality.api.rpc.unregisterEvent(evt));
  }

  /** @deprecated */
  registerSettings (section, displayName, render) {
    this._deprecationWarning('registerSettings');
    this.registered.settings.push(section);
    vizality.api.settings.registerSettings(section, {
      category: this.entityID,
      label: displayName,
      render
    });
  }

  /** @deprecated */
  registerCommand (command, aliases, description, usage, func, autocompleteFunc) {
    this._deprecationWarning('registerCommand');
    this.registered.commands.push(command);
    vizality.api.commands.registerCommand({
      command,
      aliases,
      description,
      usage,
      executor: func,
      autocomplete: autocompleteFunc
    });
  }

  /** @deprecated */
  registerKeybind (id, name, description, func, keybind, global = false) {
    this._deprecationWarning('registerKeybind');
    this.registered.keybinds.push(id);
    vizality.api.keybinds.registerKeybind(id, {
      keybind,
      executor: func,
      isGlobal: global
    });
  }

  /** @deprecated */
  updateKeybind (id, keybind) {
    this._deprecationWarning('updateKeybind');
    this.registered.keybinds.push(id);
    vizality.api.keybinds.updateKeybind(id, keybind);
  }

  /** @deprecated */
  registerRoute (path, render, noSidebar = false) {
    this._deprecationWarning('registerRoute');
    this.registered.routes.push(path);
    vizality.api.router.registerRoute(path, render, noSidebar);
  }

  /** @deprecated */
  sendToast (id, props) {
    this._deprecationWarning('sendToast');
    this.registered.toasts.push(id);
    vizality.api.notices.sendToast(id, props);
  }

  /** @deprecated */
  closeToast (id) {
    this._deprecationWarning('closeToast');
    this.registered.toasts = this.registered.toasts.filter(t => t !== id);
    vizality.api.notices.closeToast(id);
  }

  /** @deprecated */
  sendAnnouncement (id, props) {
    this._deprecationWarning('sendAnnouncement');
    this.registered.announcements.push(id);
    vizality.api.notices.sendAnnouncement(id, props);
  }

  /** @deprecated */
  closeAnnouncement (id) {
    this._deprecationWarning('closeAnnouncement');
    this.registered.announcements = this.registered.announcements.filter(t => t !== id);
    vizality.api.notices.closeAnnouncement(id);
  }

  /** @deprecated */
  registerRPCScope (scope, grant) {
    this._deprecationWarning('registerRPCScope');
    this.registered.rpcScopes.push(scope);
    vizality.api.rpc.registerScope(scope, grant);
  }

  /** @deprecated */
  unregisterRPCScope (scope) {
    this._deprecationWarning('unregisterRPCScope');
    this.registered.rpcScopes = this.registered.rpcScopes.filter(s => s !== scope);
    vizality.api.rpc.unregisterScope(scope);
  }

  /** @deprecated */
  registerRPCEvent (event, handler) {
    this._deprecationWarning('registerRPCEvent');
    this.registered.rpcEvents.push(event);
    vizality.api.rpc.registerEvent(event, handler);
  }

  /** @deprecated */
  unregisterRPCEvent (event) {
    this._deprecationWarning('unregisterRPCEvent');
    this.registered.rpcEvents = this.registered.rpcEvents.filter(e => e !== event);
    vizality.api.rpc.unregisterEvent(event);
  }

  /** @deprecated */
  loadCSS (id, path) {
    this._deprecationWarning('loadCSS');
    if (path === void 0) {
      path = id;
    }

    return this.loadStylesheet(path);
  }

  log (...data) {
    this.mainBadgeStyle +=
    `background-image: ${this.isInternal
      ? 'url(https://i.imgur.com/t0eWy67.png)'
      : this.manifest.icon
        ? `url(${this.manifest.icon})`
        : `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' transform='scale(.8)' viewBox='0 0 24 24'%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3Cpath fill='%23${this.iconColor.substring(1)}' d='M20.5 11H19V7c0-1.1-.9-2-2-2h-4V3.5C13 2.12 11.88 1 10.5 1S8 2.12 8 3.5V5H4c-1.1 0-1.99.9-1.99 2v3.8H3.5c1.49 0 2.7 1.21 2.7 2.7s-1.21 2.7-2.7 2.7H2V20c0 1.1.9 2 2 2h3.8v-1.5c0-1.49 1.21-2.7 2.7-2.7 1.49 0 2.7 1.21 2.7 2.7V22H17c1.1 0 2-.9 2-2v-4h1.5c1.38 0 2.5-1.12 2.5-2.5S21.88 11 20.5 11z'/%3E%3C/svg%3E")`};
      background-color: ${this.manifest.color
    ? this.manifest.color
    : '#7289da'};
      color: ${this.iconColor}
    `;

    this.moduleBadgeStyle +=
      `color: ${this.iconColor};
       background: ${this.manifest.color
    ? this.manifest.color
    : '#f05500'};
      `;

    console.log(
      `%c %cPlugin%c${this.constructor.name}%c`,
      this.mainBadgeStyle,
      this.descriptorBadgeStyle,
      this.moduleBadgeStyle,
      '', // clear the styles of the `data`
      ...data
    );
  }

  warn (...data) {
    this.mainBadgeStyle +=
    `background-image: ${this.isInternal
      ? 'url(https://i.imgur.com/EeCmmdP.png)'
      : this.manifest.icon
        ? `url(${this.manifest.icon})`
        : 'url(https://i.imgur.com/QCw3u25.png)'};
    `;

    this.moduleBadgeStyle +=
      `background: ${this.manifest.color
        ? this.manifest.color
        : '#f05500'};
      `;

    console.warn(
      `%cWarning %c %cPlugin%c${this.constructor.name}%c`,
      this.warnBadgeStyle,
      this.mainBadgeStyle,
      this.descriptorBadgeStyle,
      this.moduleBadgeStyle,
      '', // clear the styles of the `data`
      ...data
    );
  }

  error (...data) {
    this.mainBadgeStyle +=
    `background-image: ${this.isInternal
      ? 'url(https://i.imgur.com/EeCmmdP.png)'
      : this.manifest.icon
        ? `url(${this.manifest.icon})`
        : 'url(https://i.imgur.com/QCw3u25.png)'};
    `;

    this.moduleBadgeStyle +=
      `background: ${this.manifest.color
        ? this.manifest.color
        : '#f05500'};
      `;

    console.error(
      `%cError %c %cPlugin%c${this.constructor.name}%c`,
      this.errorBadgeStyle,
      this.mainBadgeStyle,
      this.descriptorBadgeStyle,
      this.moduleBadgeStyle,
      '', // clear the styles of the `data`
      ...data
    );
  }

  /** @private */
  _deprecationWarning (method) {
    console.group(`%c[${this.constructor.name}] DEPRECATION WARNING`, 'color: #f04747');
    console.warn(`${method} is deprecated and should no longer be used`);
    console.warn('It\'ll be pernamently removed from Vizality on %cNovember 1st, 2020', 'font-weight: bold');
    console.groupEnd();
  }
}

module.exports = Plugin;
