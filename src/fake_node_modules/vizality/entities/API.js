const Events = require('events');

class API extends Events {
  constructor () {
    super();
    this.ready = false;

    this.baseBadgeStyle =
      `color: #fff;
      border-radius: 3px;
      text-align: center;
      display: inline-block;
      font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
      text-transform: uppercase;
      font-size: 10px;
      font-weight: 700;
      line-height: 14px;
      margin-right: 3px;
      padding: 1px 4px;
      `;

    this.mainBadgeStyle =
      `background-image: url(https://i.imgur.com/t0eWy67.png);
      background-repeat: no-repeat;
      background-position: center;
      background-size: contain;
      padding: 2px 16px 5px 0;
      border-radius: 5px;
      text-align: center;
      margin: 0 2px 1px 0;
      display: inline-block;
      `;

    this.descriptorBadgeStyle =
      `background: #3c7e99;
      ${this.baseBadgeStyle}
      `;

    this.moduleBadgeStyle =
      `background: #8a50cc;
       ${this.baseBadgeStyle}
      `;

    this.warnBadgeStyle =
      `color: #000;
       background: #fffc00;
       ${this.baseBadgeStyle}
      `;

    this.errorBadgeStyle =
      `background: #ff0000;
       ${this.baseBadgeStyle}
      `;
  }

  async _load () {
    try {
      if (typeof this.startAPI === 'function') {
        await this.startAPI();
      }
      this.log('API loaded');
      this.ready = true;
    } catch (e) {
      this.error('An error occurred during initialization!', e);
    }
  }

  async _unload () {
    try {
      if (typeof this.apiWillUnload === 'function') {
        await this.apiWillUnload();
      }
      this.ready = false;
      this.log('Plugin unloaded');
    } catch (e) {
      this.error('An error occurred during shutting down! It\'s heavily recommended to reload Discord to ensure there is no conflicts.', e);
    }
  }

  log (...data) {
    console.log(
      `%c %cAPI%c${this.constructor.name}%c`,
      this.mainBadgeStyle,
      this.descriptorBadgeStyle,
      this.moduleBadgeStyle,
      '', // clear the styles of the `data`
      ...data
    );
  }

  warn (...data) {
    console.warn(
      `%cWarning %c %cAPI%c${this.constructor.name}%c`,
      this.warnBadgeStyle,
      this.mainBadgeStyle,
      this.descriptorBadgeStyle,
      this.moduleBadgeStyle,
      '', // clear the styles of the `data`
      ...data
    );
  }

  error (...data) {
    console.error(
      `%cError %c %cAPI%c${this.constructor.name}%c`,
      this.errorBadgeStyle,
      this.mainBadgeStyle,
      this.descriptorBadgeStyle,
      this.moduleBadgeStyle,
      '', // clear the styles of the `data`
      ...data
    );
  }
}

module.exports = API;
